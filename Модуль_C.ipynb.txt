{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "#Модуль А"
      ],
      "metadata": {
        "id": "aCV_9n-GsMrn"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Импортируем библиотеки"
      ],
      "metadata": {
        "id": "jfmnRCcbBRPK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "Tu-iJqfu1XRU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Загрузим датасет"
      ],
      "metadata": {
        "id": "WD6omJZuBXPA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6yKngIwt3q59",
        "outputId": "bc800172-db33-4bb6-87a8-2e9f80c1d758"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "%cd /content/drive/My Drive/Colab Notebooks/"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u7gqkpU24Yve",
        "outputId": "ab53c875-f667-427a-daec-f50dcf03143b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "/content/drive/My Drive/Colab Notebooks\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df = pd.read_csv(\"pump.csv\")\n"
      ],
      "metadata": {
        "id": "EcZ4pvRu4K1g"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Посмотрим датасет"
      ],
      "metadata": {
        "id": "bHHNeLwmBan4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 852
        },
        "id": "SOc_le4L4cuO",
        "outputId": "4aaf983f-b28e-4333-f48b-48e809b31f70"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        Unnamed: 0            timestamp  sensor_00  sensor_01  sensor_02  \\\n",
              "0                0  2018-04-01 00:00:00   2.465394   47.09201  53.211800   \n",
              "1                1  2018-04-01 00:01:00   2.465394   47.09201  53.211800   \n",
              "2                2  2018-04-01 00:02:00   2.444734   47.35243  53.211800   \n",
              "3                3  2018-04-01 00:03:00   2.460474   47.09201  53.168400   \n",
              "4                4  2018-04-01 00:04:00   2.445718   47.13541  53.211800   \n",
              "...            ...                  ...        ...        ...        ...   \n",
              "220315      220315  2018-08-31 23:55:00   2.407350   47.69965  50.520830   \n",
              "220316      220316  2018-08-31 23:56:00   2.400463   47.69965  50.564240   \n",
              "220317      220317  2018-08-31 23:57:00   2.396528   47.69965  50.520830   \n",
              "220318      220318  2018-08-31 23:58:00   2.406366   47.69965  50.520832   \n",
              "220319      220319  2018-08-31 23:59:00   2.396528   47.69965  50.520832   \n",
              "\n",
              "        sensor_03   sensor_04  sensor_05  sensor_06  sensor_07  ...  \\\n",
              "0       46.310760  634.375000   76.45975   13.41146   16.13136  ...   \n",
              "1       46.310760  634.375000   76.45975   13.41146   16.13136  ...   \n",
              "2       46.397570  638.888900   73.54598   13.32465   16.03733  ...   \n",
              "3       46.397568  628.125000   76.98898   13.31742   16.24711  ...   \n",
              "4       46.397568  636.458300   76.58897   13.35359   16.21094  ...   \n",
              "...           ...         ...        ...        ...        ...  ...   \n",
              "220315  43.142361  634.722229   64.59095   15.11863   16.65220  ...   \n",
              "220316  43.142361  630.902771   65.83363   15.15480   16.70284  ...   \n",
              "220317  43.142361  625.925903   67.29445   15.08970   16.70284  ...   \n",
              "220318  43.142361  635.648100   65.09175   15.11863   16.56539  ...   \n",
              "220319  43.142361  639.814800   65.45634   15.11863   16.65220  ...   \n",
              "\n",
              "        sensor_43  sensor_44  sensor_45  sensor_46  sensor_47  sensor_48  \\\n",
              "0        41.92708  39.641200   65.68287   50.92593  38.194440   157.9861   \n",
              "1        41.92708  39.641200   65.68287   50.92593  38.194440   157.9861   \n",
              "2        41.66666  39.351852   65.39352   51.21528  38.194443   155.9606   \n",
              "3        40.88541  39.062500   64.81481   51.21528  38.194440   155.9606   \n",
              "4        41.40625  38.773150   65.10416   51.79398  38.773150   158.2755   \n",
              "...           ...        ...        ...        ...        ...        ...   \n",
              "220315   38.28125  68.287030   52.37268   48.32176  41.087960   212.3843   \n",
              "220316   38.28125  66.840280   50.63657   48.03241  40.798610   213.8310   \n",
              "220317   39.06250  65.393520   48.90046   48.03241  40.798610   217.3032   \n",
              "220318   40.62500  64.236110   47.74306   48.32176  40.509258   222.5116   \n",
              "220319   41.40625  62.789350   46.29630   48.90046  40.219910   227.4306   \n",
              "\n",
              "        sensor_49  sensor_50  sensor_51  machine_status  \n",
              "0        67.70834   243.0556   201.3889          NORMAL  \n",
              "1        67.70834   243.0556   201.3889          NORMAL  \n",
              "2        67.12963   241.3194   203.7037          NORMAL  \n",
              "3        66.84028   240.4514   203.1250          NORMAL  \n",
              "4        66.55093   242.1875   201.3889          NORMAL  \n",
              "...           ...        ...        ...             ...  \n",
              "220315  153.64580        NaN   231.1921          NORMAL  \n",
              "220316  156.25000        NaN   231.1921          NORMAL  \n",
              "220317  155.38190        NaN   232.0602          NORMAL  \n",
              "220318  153.93520        NaN   234.0856          NORMAL  \n",
              "220319  150.46300        NaN   234.0856          NORMAL  \n",
              "\n",
              "[220320 rows x 55 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b25e85e0-1e24-4124-a921-2df4ccc26350\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Unnamed: 0</th>\n",
              "      <th>timestamp</th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_43</th>\n",
              "      <th>sensor_44</th>\n",
              "      <th>sensor_45</th>\n",
              "      <th>sensor_46</th>\n",
              "      <th>sensor_47</th>\n",
              "      <th>sensor_48</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>machine_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>2018-04-01 00:00:00</td>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>...</td>\n",
              "      <td>41.92708</td>\n",
              "      <td>39.641200</td>\n",
              "      <td>65.68287</td>\n",
              "      <td>50.92593</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>157.9861</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.0556</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>2018-04-01 00:01:00</td>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>...</td>\n",
              "      <td>41.92708</td>\n",
              "      <td>39.641200</td>\n",
              "      <td>65.68287</td>\n",
              "      <td>50.92593</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>157.9861</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.0556</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>2018-04-01 00:02:00</td>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>...</td>\n",
              "      <td>41.66666</td>\n",
              "      <td>39.351852</td>\n",
              "      <td>65.39352</td>\n",
              "      <td>51.21528</td>\n",
              "      <td>38.194443</td>\n",
              "      <td>155.9606</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.3194</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>2018-04-01 00:03:00</td>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>...</td>\n",
              "      <td>40.88541</td>\n",
              "      <td>39.062500</td>\n",
              "      <td>64.81481</td>\n",
              "      <td>51.21528</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>155.9606</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.4514</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>2018-04-01 00:04:00</td>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>...</td>\n",
              "      <td>41.40625</td>\n",
              "      <td>38.773150</td>\n",
              "      <td>65.10416</td>\n",
              "      <td>51.79398</td>\n",
              "      <td>38.773150</td>\n",
              "      <td>158.2755</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.1875</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>220315</td>\n",
              "      <td>2018-08-31 23:55:00</td>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>...</td>\n",
              "      <td>38.28125</td>\n",
              "      <td>68.287030</td>\n",
              "      <td>52.37268</td>\n",
              "      <td>48.32176</td>\n",
              "      <td>41.087960</td>\n",
              "      <td>212.3843</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>NaN</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>220316</td>\n",
              "      <td>2018-08-31 23:56:00</td>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>...</td>\n",
              "      <td>38.28125</td>\n",
              "      <td>66.840280</td>\n",
              "      <td>50.63657</td>\n",
              "      <td>48.03241</td>\n",
              "      <td>40.798610</td>\n",
              "      <td>213.8310</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>220317</td>\n",
              "      <td>2018-08-31 23:57:00</td>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>...</td>\n",
              "      <td>39.06250</td>\n",
              "      <td>65.393520</td>\n",
              "      <td>48.90046</td>\n",
              "      <td>48.03241</td>\n",
              "      <td>40.798610</td>\n",
              "      <td>217.3032</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>NaN</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>220318</td>\n",
              "      <td>2018-08-31 23:58:00</td>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>...</td>\n",
              "      <td>40.62500</td>\n",
              "      <td>64.236110</td>\n",
              "      <td>47.74306</td>\n",
              "      <td>48.32176</td>\n",
              "      <td>40.509258</td>\n",
              "      <td>222.5116</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>NaN</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>220319</td>\n",
              "      <td>2018-08-31 23:59:00</td>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>...</td>\n",
              "      <td>41.40625</td>\n",
              "      <td>62.789350</td>\n",
              "      <td>46.29630</td>\n",
              "      <td>48.90046</td>\n",
              "      <td>40.219910</td>\n",
              "      <td>227.4306</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>NaN</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 55 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b25e85e0-1e24-4124-a921-2df4ccc26350')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b25e85e0-1e24-4124-a921-2df4ccc26350 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b25e85e0-1e24-4124-a921-2df4ccc26350');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Удалим id"
      ],
      "metadata": {
        "id": "k4FtwHxVBeb4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns=[\"Unnamed: 0\"], inplace=True)"
      ],
      "metadata": {
        "id": "Azq8B22n4hPW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Посмотрим количество неопределенных значений"
      ],
      "metadata": {
        "id": "gq181syZBiW4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fPNdStao4yxL",
        "outputId": "19ceb5e7-cca9-48a8-baaf-b1aca80d6ec0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "timestamp              0\n",
              "sensor_00          10208\n",
              "sensor_01            369\n",
              "sensor_02             19\n",
              "sensor_03             19\n",
              "sensor_04             19\n",
              "sensor_05             19\n",
              "sensor_06           4798\n",
              "sensor_07           5451\n",
              "sensor_08           5107\n",
              "sensor_09           4595\n",
              "sensor_10             19\n",
              "sensor_11             19\n",
              "sensor_12             19\n",
              "sensor_13             19\n",
              "sensor_14             21\n",
              "sensor_15         220320\n",
              "sensor_16             31\n",
              "sensor_17             46\n",
              "sensor_18             46\n",
              "sensor_19             16\n",
              "sensor_20             16\n",
              "sensor_21             16\n",
              "sensor_22             41\n",
              "sensor_23             16\n",
              "sensor_24             16\n",
              "sensor_25             36\n",
              "sensor_26             20\n",
              "sensor_27             16\n",
              "sensor_28             16\n",
              "sensor_29             72\n",
              "sensor_30            261\n",
              "sensor_31             16\n",
              "sensor_32             68\n",
              "sensor_33             16\n",
              "sensor_34             16\n",
              "sensor_35             16\n",
              "sensor_36             16\n",
              "sensor_37             16\n",
              "sensor_38             27\n",
              "sensor_39             27\n",
              "sensor_40             27\n",
              "sensor_41             27\n",
              "sensor_42             27\n",
              "sensor_43             27\n",
              "sensor_44             27\n",
              "sensor_45             27\n",
              "sensor_46             27\n",
              "sensor_47             27\n",
              "sensor_48             27\n",
              "sensor_49             27\n",
              "sensor_50          77017\n",
              "sensor_51          15383\n",
              "machine_status         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Посмотрим столбцы, кол-во ненулевых данных в каждом из столбцов и тип данных столбца"
      ],
      "metadata": {
        "id": "h24wqmvGBq9H"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pcYWqZk145IO",
        "outputId": "f2e82da7-e93a-413f-a88a-523e43afb9a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 220320 entries, 0 to 220319\n",
            "Data columns (total 54 columns):\n",
            " #   Column          Non-Null Count   Dtype  \n",
            "---  ------          --------------   -----  \n",
            " 0   timestamp       220320 non-null  object \n",
            " 1   sensor_00       210112 non-null  float64\n",
            " 2   sensor_01       219951 non-null  float64\n",
            " 3   sensor_02       220301 non-null  float64\n",
            " 4   sensor_03       220301 non-null  float64\n",
            " 5   sensor_04       220301 non-null  float64\n",
            " 6   sensor_05       220301 non-null  float64\n",
            " 7   sensor_06       215522 non-null  float64\n",
            " 8   sensor_07       214869 non-null  float64\n",
            " 9   sensor_08       215213 non-null  float64\n",
            " 10  sensor_09       215725 non-null  float64\n",
            " 11  sensor_10       220301 non-null  float64\n",
            " 12  sensor_11       220301 non-null  float64\n",
            " 13  sensor_12       220301 non-null  float64\n",
            " 14  sensor_13       220301 non-null  float64\n",
            " 15  sensor_14       220299 non-null  float64\n",
            " 16  sensor_15       0 non-null       float64\n",
            " 17  sensor_16       220289 non-null  float64\n",
            " 18  sensor_17       220274 non-null  float64\n",
            " 19  sensor_18       220274 non-null  float64\n",
            " 20  sensor_19       220304 non-null  float64\n",
            " 21  sensor_20       220304 non-null  float64\n",
            " 22  sensor_21       220304 non-null  float64\n",
            " 23  sensor_22       220279 non-null  float64\n",
            " 24  sensor_23       220304 non-null  float64\n",
            " 25  sensor_24       220304 non-null  float64\n",
            " 26  sensor_25       220284 non-null  float64\n",
            " 27  sensor_26       220300 non-null  float64\n",
            " 28  sensor_27       220304 non-null  float64\n",
            " 29  sensor_28       220304 non-null  float64\n",
            " 30  sensor_29       220248 non-null  float64\n",
            " 31  sensor_30       220059 non-null  float64\n",
            " 32  sensor_31       220304 non-null  float64\n",
            " 33  sensor_32       220252 non-null  float64\n",
            " 34  sensor_33       220304 non-null  float64\n",
            " 35  sensor_34       220304 non-null  float64\n",
            " 36  sensor_35       220304 non-null  float64\n",
            " 37  sensor_36       220304 non-null  float64\n",
            " 38  sensor_37       220304 non-null  float64\n",
            " 39  sensor_38       220293 non-null  float64\n",
            " 40  sensor_39       220293 non-null  float64\n",
            " 41  sensor_40       220293 non-null  float64\n",
            " 42  sensor_41       220293 non-null  float64\n",
            " 43  sensor_42       220293 non-null  float64\n",
            " 44  sensor_43       220293 non-null  float64\n",
            " 45  sensor_44       220293 non-null  float64\n",
            " 46  sensor_45       220293 non-null  float64\n",
            " 47  sensor_46       220293 non-null  float64\n",
            " 48  sensor_47       220293 non-null  float64\n",
            " 49  sensor_48       220293 non-null  float64\n",
            " 50  sensor_49       220293 non-null  float64\n",
            " 51  sensor_50       143303 non-null  float64\n",
            " 52  sensor_51       204937 non-null  float64\n",
            " 53  machine_status  220320 non-null  object \n",
            "dtypes: float64(52), object(2)\n",
            "memory usage: 90.8+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Выведем описательные статистики"
      ],
      "metadata": {
        "id": "nZb20IA2B0Nv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 393
        },
        "id": "11BkJ25i4_ir",
        "outputId": "ed98e373-e760-4f19-8eca-7b6b7335d9c6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           sensor_00      sensor_01      sensor_02      sensor_03  \\\n",
              "count  210112.000000  219951.000000  220301.000000  220301.000000   \n",
              "mean        2.372221      47.591611      50.867392      43.752481   \n",
              "std         0.412227       3.296666       3.666820       2.418887   \n",
              "min         0.000000       0.000000      33.159720      31.640620   \n",
              "25%         2.438831      46.310760      50.390620      42.838539   \n",
              "50%         2.456539      48.133678      51.649300      44.227428   \n",
              "75%         2.499826      49.479160      52.777770      45.312500   \n",
              "max         2.549016      56.727430      56.032990      48.220490   \n",
              "\n",
              "           sensor_04      sensor_05      sensor_06      sensor_07  \\\n",
              "count  220301.000000  220301.000000  215522.000000  214869.000000   \n",
              "mean      590.673936      73.396414      13.501537      15.843152   \n",
              "std       144.023912      17.298247       2.163736       2.201155   \n",
              "min         2.798032       0.000000       0.014468       0.000000   \n",
              "25%       626.620400      69.976260      13.346350      15.907120   \n",
              "50%       632.638916      75.576790      13.642940      16.167530   \n",
              "75%       637.615723      80.912150      14.539930      16.427950   \n",
              "max       800.000000      99.999880      22.251160      23.596640   \n",
              "\n",
              "           sensor_08      sensor_09  ...      sensor_42      sensor_43  \\\n",
              "count  215213.000000  215725.000000  ...  220293.000000  220293.000000   \n",
              "mean       15.200721      14.799210  ...      35.453455      43.879591   \n",
              "std         2.037390       2.091963  ...      10.259521      11.044404   \n",
              "min         0.028935       0.000000  ...      22.135416      24.479166   \n",
              "25%        15.183740      15.053530  ...      32.812500      39.583330   \n",
              "50%        15.494790      15.082470  ...      35.156250      42.968750   \n",
              "75%        15.697340      15.118630  ...      36.979164      46.614580   \n",
              "max        24.348960      25.000000  ...     374.218800     408.593700   \n",
              "\n",
              "           sensor_44      sensor_45      sensor_46      sensor_47  \\\n",
              "count  220293.000000  220293.000000  220293.000000  220293.000000   \n",
              "mean       42.656877      43.094984      48.018585      44.340903   \n",
              "std        11.576355      12.837520      15.641284      10.442437   \n",
              "min        25.752316      26.331018      26.331018      27.199070   \n",
              "25%        36.747684      36.747684      40.509258      39.062500   \n",
              "50%        40.509260      40.219910      44.849540      42.534720   \n",
              "75%        45.138890      44.849540      51.215280      46.585650   \n",
              "max      1000.000000     320.312500     370.370400     303.530100   \n",
              "\n",
              "           sensor_48      sensor_49      sensor_50      sensor_51  \n",
              "count  220293.000000  220293.000000  143303.000000  204937.000000  \n",
              "mean      150.889044      57.119968     183.049260     202.699667  \n",
              "std        82.244957      19.143598      65.258650     109.588607  \n",
              "min        26.331018      26.620370      27.488426      27.777779  \n",
              "25%        83.912030      47.743060     167.534700     179.108800  \n",
              "50%       138.020800      52.662040     193.865700     197.338000  \n",
              "75%       208.333300      60.763890     219.907400     216.724500  \n",
              "max       561.632000     464.409700    1000.000000    1000.000000  \n",
              "\n",
              "[8 rows x 52 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-36dfa60e-7e64-439e-a8bd-d8f0d7535e2d\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>sensor_09</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_42</th>\n",
              "      <th>sensor_43</th>\n",
              "      <th>sensor_44</th>\n",
              "      <th>sensor_45</th>\n",
              "      <th>sensor_46</th>\n",
              "      <th>sensor_47</th>\n",
              "      <th>sensor_48</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>210112.000000</td>\n",
              "      <td>219951.000000</td>\n",
              "      <td>220301.000000</td>\n",
              "      <td>220301.000000</td>\n",
              "      <td>220301.000000</td>\n",
              "      <td>220301.000000</td>\n",
              "      <td>215522.000000</td>\n",
              "      <td>214869.000000</td>\n",
              "      <td>215213.000000</td>\n",
              "      <td>215725.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>220293.000000</td>\n",
              "      <td>143303.000000</td>\n",
              "      <td>204937.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>2.372221</td>\n",
              "      <td>47.591611</td>\n",
              "      <td>50.867392</td>\n",
              "      <td>43.752481</td>\n",
              "      <td>590.673936</td>\n",
              "      <td>73.396414</td>\n",
              "      <td>13.501537</td>\n",
              "      <td>15.843152</td>\n",
              "      <td>15.200721</td>\n",
              "      <td>14.799210</td>\n",
              "      <td>...</td>\n",
              "      <td>35.453455</td>\n",
              "      <td>43.879591</td>\n",
              "      <td>42.656877</td>\n",
              "      <td>43.094984</td>\n",
              "      <td>48.018585</td>\n",
              "      <td>44.340903</td>\n",
              "      <td>150.889044</td>\n",
              "      <td>57.119968</td>\n",
              "      <td>183.049260</td>\n",
              "      <td>202.699667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.412227</td>\n",
              "      <td>3.296666</td>\n",
              "      <td>3.666820</td>\n",
              "      <td>2.418887</td>\n",
              "      <td>144.023912</td>\n",
              "      <td>17.298247</td>\n",
              "      <td>2.163736</td>\n",
              "      <td>2.201155</td>\n",
              "      <td>2.037390</td>\n",
              "      <td>2.091963</td>\n",
              "      <td>...</td>\n",
              "      <td>10.259521</td>\n",
              "      <td>11.044404</td>\n",
              "      <td>11.576355</td>\n",
              "      <td>12.837520</td>\n",
              "      <td>15.641284</td>\n",
              "      <td>10.442437</td>\n",
              "      <td>82.244957</td>\n",
              "      <td>19.143598</td>\n",
              "      <td>65.258650</td>\n",
              "      <td>109.588607</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>33.159720</td>\n",
              "      <td>31.640620</td>\n",
              "      <td>2.798032</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.014468</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.028935</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>22.135416</td>\n",
              "      <td>24.479166</td>\n",
              "      <td>25.752316</td>\n",
              "      <td>26.331018</td>\n",
              "      <td>26.331018</td>\n",
              "      <td>27.199070</td>\n",
              "      <td>26.331018</td>\n",
              "      <td>26.620370</td>\n",
              "      <td>27.488426</td>\n",
              "      <td>27.777779</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>2.438831</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>50.390620</td>\n",
              "      <td>42.838539</td>\n",
              "      <td>626.620400</td>\n",
              "      <td>69.976260</td>\n",
              "      <td>13.346350</td>\n",
              "      <td>15.907120</td>\n",
              "      <td>15.183740</td>\n",
              "      <td>15.053530</td>\n",
              "      <td>...</td>\n",
              "      <td>32.812500</td>\n",
              "      <td>39.583330</td>\n",
              "      <td>36.747684</td>\n",
              "      <td>36.747684</td>\n",
              "      <td>40.509258</td>\n",
              "      <td>39.062500</td>\n",
              "      <td>83.912030</td>\n",
              "      <td>47.743060</td>\n",
              "      <td>167.534700</td>\n",
              "      <td>179.108800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>2.456539</td>\n",
              "      <td>48.133678</td>\n",
              "      <td>51.649300</td>\n",
              "      <td>44.227428</td>\n",
              "      <td>632.638916</td>\n",
              "      <td>75.576790</td>\n",
              "      <td>13.642940</td>\n",
              "      <td>16.167530</td>\n",
              "      <td>15.494790</td>\n",
              "      <td>15.082470</td>\n",
              "      <td>...</td>\n",
              "      <td>35.156250</td>\n",
              "      <td>42.968750</td>\n",
              "      <td>40.509260</td>\n",
              "      <td>40.219910</td>\n",
              "      <td>44.849540</td>\n",
              "      <td>42.534720</td>\n",
              "      <td>138.020800</td>\n",
              "      <td>52.662040</td>\n",
              "      <td>193.865700</td>\n",
              "      <td>197.338000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>2.499826</td>\n",
              "      <td>49.479160</td>\n",
              "      <td>52.777770</td>\n",
              "      <td>45.312500</td>\n",
              "      <td>637.615723</td>\n",
              "      <td>80.912150</td>\n",
              "      <td>14.539930</td>\n",
              "      <td>16.427950</td>\n",
              "      <td>15.697340</td>\n",
              "      <td>15.118630</td>\n",
              "      <td>...</td>\n",
              "      <td>36.979164</td>\n",
              "      <td>46.614580</td>\n",
              "      <td>45.138890</td>\n",
              "      <td>44.849540</td>\n",
              "      <td>51.215280</td>\n",
              "      <td>46.585650</td>\n",
              "      <td>208.333300</td>\n",
              "      <td>60.763890</td>\n",
              "      <td>219.907400</td>\n",
              "      <td>216.724500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>2.549016</td>\n",
              "      <td>56.727430</td>\n",
              "      <td>56.032990</td>\n",
              "      <td>48.220490</td>\n",
              "      <td>800.000000</td>\n",
              "      <td>99.999880</td>\n",
              "      <td>22.251160</td>\n",
              "      <td>23.596640</td>\n",
              "      <td>24.348960</td>\n",
              "      <td>25.000000</td>\n",
              "      <td>...</td>\n",
              "      <td>374.218800</td>\n",
              "      <td>408.593700</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>320.312500</td>\n",
              "      <td>370.370400</td>\n",
              "      <td>303.530100</td>\n",
              "      <td>561.632000</td>\n",
              "      <td>464.409700</td>\n",
              "      <td>1000.000000</td>\n",
              "      <td>1000.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 52 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-36dfa60e-7e64-439e-a8bd-d8f0d7535e2d')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-36dfa60e-7e64-439e-a8bd-d8f0d7535e2d button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-36dfa60e-7e64-439e-a8bd-d8f0d7535e2d');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Далее избавимся от NaN"
      ],
      "metadata": {
        "id": "-8rboH_bB5ue"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "columns = df.columns\n",
        "columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PhnHYxca6UHz",
        "outputId": "deae5d99-b081-40db-b899-bc4af6f4c687"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['timestamp', 'sensor_00', 'sensor_01', 'sensor_02', 'sensor_03',\n",
              "       'sensor_04', 'sensor_05', 'sensor_06', 'sensor_07', 'sensor_08',\n",
              "       'sensor_09', 'sensor_10', 'sensor_11', 'sensor_12', 'sensor_13',\n",
              "       'sensor_14', 'sensor_15', 'sensor_16', 'sensor_17', 'sensor_18',\n",
              "       'sensor_19', 'sensor_20', 'sensor_21', 'sensor_22', 'sensor_23',\n",
              "       'sensor_24', 'sensor_25', 'sensor_26', 'sensor_27', 'sensor_28',\n",
              "       'sensor_29', 'sensor_30', 'sensor_31', 'sensor_32', 'sensor_33',\n",
              "       'sensor_34', 'sensor_35', 'sensor_36', 'sensor_37', 'sensor_38',\n",
              "       'sensor_39', 'sensor_40', 'sensor_41', 'sensor_42', 'sensor_43',\n",
              "       'sensor_44', 'sensor_45', 'sensor_46', 'sensor_47', 'sensor_48',\n",
              "       'sensor_49', 'sensor_50', 'sensor_51', 'machine_status'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c = list(columns)\n",
        "c"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FCalYtCz6uWy",
        "outputId": "e325aa6f-f80a-4253-ae98-ee1d6ed92b21"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['timestamp',\n",
              " 'sensor_00',\n",
              " 'sensor_01',\n",
              " 'sensor_02',\n",
              " 'sensor_03',\n",
              " 'sensor_04',\n",
              " 'sensor_05',\n",
              " 'sensor_06',\n",
              " 'sensor_07',\n",
              " 'sensor_08',\n",
              " 'sensor_09',\n",
              " 'sensor_10',\n",
              " 'sensor_11',\n",
              " 'sensor_12',\n",
              " 'sensor_13',\n",
              " 'sensor_14',\n",
              " 'sensor_15',\n",
              " 'sensor_16',\n",
              " 'sensor_17',\n",
              " 'sensor_18',\n",
              " 'sensor_19',\n",
              " 'sensor_20',\n",
              " 'sensor_21',\n",
              " 'sensor_22',\n",
              " 'sensor_23',\n",
              " 'sensor_24',\n",
              " 'sensor_25',\n",
              " 'sensor_26',\n",
              " 'sensor_27',\n",
              " 'sensor_28',\n",
              " 'sensor_29',\n",
              " 'sensor_30',\n",
              " 'sensor_31',\n",
              " 'sensor_32',\n",
              " 'sensor_33',\n",
              " 'sensor_34',\n",
              " 'sensor_35',\n",
              " 'sensor_36',\n",
              " 'sensor_37',\n",
              " 'sensor_38',\n",
              " 'sensor_39',\n",
              " 'sensor_40',\n",
              " 'sensor_41',\n",
              " 'sensor_42',\n",
              " 'sensor_43',\n",
              " 'sensor_44',\n",
              " 'sensor_45',\n",
              " 'sensor_46',\n",
              " 'sensor_47',\n",
              " 'sensor_48',\n",
              " 'sensor_49',\n",
              " 'sensor_50',\n",
              " 'sensor_51',\n",
              " 'machine_status']"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c = c[1:-1]\n",
        "c"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PK25ewAN64js",
        "outputId": "211bb4c5-f95f-46cc-d859-98dec00f71b5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['sensor_00',\n",
              " 'sensor_01',\n",
              " 'sensor_02',\n",
              " 'sensor_03',\n",
              " 'sensor_04',\n",
              " 'sensor_05',\n",
              " 'sensor_06',\n",
              " 'sensor_07',\n",
              " 'sensor_08',\n",
              " 'sensor_09',\n",
              " 'sensor_10',\n",
              " 'sensor_11',\n",
              " 'sensor_12',\n",
              " 'sensor_13',\n",
              " 'sensor_14',\n",
              " 'sensor_15',\n",
              " 'sensor_16',\n",
              " 'sensor_17',\n",
              " 'sensor_18',\n",
              " 'sensor_19',\n",
              " 'sensor_20',\n",
              " 'sensor_21',\n",
              " 'sensor_22',\n",
              " 'sensor_23',\n",
              " 'sensor_24',\n",
              " 'sensor_25',\n",
              " 'sensor_26',\n",
              " 'sensor_27',\n",
              " 'sensor_28',\n",
              " 'sensor_29',\n",
              " 'sensor_30',\n",
              " 'sensor_31',\n",
              " 'sensor_32',\n",
              " 'sensor_33',\n",
              " 'sensor_34',\n",
              " 'sensor_35',\n",
              " 'sensor_36',\n",
              " 'sensor_37',\n",
              " 'sensor_38',\n",
              " 'sensor_39',\n",
              " 'sensor_40',\n",
              " 'sensor_41',\n",
              " 'sensor_42',\n",
              " 'sensor_43',\n",
              " 'sensor_44',\n",
              " 'sensor_45',\n",
              " 'sensor_46',\n",
              " 'sensor_47',\n",
              " 'sensor_48',\n",
              " 'sensor_49',\n",
              " 'sensor_50',\n",
              " 'sensor_51']"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for i in c:\n",
        "  df[c] = df[c].fillna(df[c].mean())"
      ],
      "metadata": {
        "id": "ARy3_8VH5DGZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Посмотрим на результат"
      ],
      "metadata": {
        "id": "kw4_W9-ZCAQP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fR7nsJzH8CWc",
        "outputId": "ddffc8dd-11c1-4a70-d3fd-246208a3f62d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "timestamp              0\n",
              "sensor_00              0\n",
              "sensor_01              0\n",
              "sensor_02              0\n",
              "sensor_03              0\n",
              "sensor_04              0\n",
              "sensor_05              0\n",
              "sensor_06              0\n",
              "sensor_07              0\n",
              "sensor_08              0\n",
              "sensor_09              0\n",
              "sensor_10              0\n",
              "sensor_11              0\n",
              "sensor_12              0\n",
              "sensor_13              0\n",
              "sensor_14              0\n",
              "sensor_15         220320\n",
              "sensor_16              0\n",
              "sensor_17              0\n",
              "sensor_18              0\n",
              "sensor_19              0\n",
              "sensor_20              0\n",
              "sensor_21              0\n",
              "sensor_22              0\n",
              "sensor_23              0\n",
              "sensor_24              0\n",
              "sensor_25              0\n",
              "sensor_26              0\n",
              "sensor_27              0\n",
              "sensor_28              0\n",
              "sensor_29              0\n",
              "sensor_30              0\n",
              "sensor_31              0\n",
              "sensor_32              0\n",
              "sensor_33              0\n",
              "sensor_34              0\n",
              "sensor_35              0\n",
              "sensor_36              0\n",
              "sensor_37              0\n",
              "sensor_38              0\n",
              "sensor_39              0\n",
              "sensor_40              0\n",
              "sensor_41              0\n",
              "sensor_42              0\n",
              "sensor_43              0\n",
              "sensor_44              0\n",
              "sensor_45              0\n",
              "sensor_46              0\n",
              "sensor_47              0\n",
              "sensor_48              0\n",
              "sensor_49              0\n",
              "sensor_50              0\n",
              "sensor_51              0\n",
              "machine_status         0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Удалим столбец sensor_15, поскольку он не несет в себе нужной информации"
      ],
      "metadata": {
        "id": "czlL8ZCHCIKU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop(\"sensor_15\", axis=1)"
      ],
      "metadata": {
        "id": "bh5I21-q8kIR"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_e3EI2iL81Nm",
        "outputId": "c8060760-c809-4a3d-fa55-f4d3fac318d2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "timestamp         0\n",
              "sensor_00         0\n",
              "sensor_01         0\n",
              "sensor_02         0\n",
              "sensor_03         0\n",
              "sensor_04         0\n",
              "sensor_05         0\n",
              "sensor_06         0\n",
              "sensor_07         0\n",
              "sensor_08         0\n",
              "sensor_09         0\n",
              "sensor_10         0\n",
              "sensor_11         0\n",
              "sensor_12         0\n",
              "sensor_13         0\n",
              "sensor_14         0\n",
              "sensor_16         0\n",
              "sensor_17         0\n",
              "sensor_18         0\n",
              "sensor_19         0\n",
              "sensor_20         0\n",
              "sensor_21         0\n",
              "sensor_22         0\n",
              "sensor_23         0\n",
              "sensor_24         0\n",
              "sensor_25         0\n",
              "sensor_26         0\n",
              "sensor_27         0\n",
              "sensor_28         0\n",
              "sensor_29         0\n",
              "sensor_30         0\n",
              "sensor_31         0\n",
              "sensor_32         0\n",
              "sensor_33         0\n",
              "sensor_34         0\n",
              "sensor_35         0\n",
              "sensor_36         0\n",
              "sensor_37         0\n",
              "sensor_38         0\n",
              "sensor_39         0\n",
              "sensor_40         0\n",
              "sensor_41         0\n",
              "sensor_42         0\n",
              "sensor_43         0\n",
              "sensor_44         0\n",
              "sensor_45         0\n",
              "sensor_46         0\n",
              "sensor_47         0\n",
              "sensor_48         0\n",
              "sensor_49         0\n",
              "sensor_50         0\n",
              "sensor_51         0\n",
              "machine_status    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Удалим дубликаты, если они есть"
      ],
      "metadata": {
        "id": "nZvHEc5hCS7g"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df = df.drop_duplicates()\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 834
        },
        "id": "5V5AnM-v7s4h",
        "outputId": "fe8690d0-2155-47cf-b36f-d3cdf4e6fe2d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  timestamp  sensor_00  sensor_01  sensor_02  sensor_03  \\\n",
              "0       2018-04-01 00:00:00   2.465394   47.09201  53.211800  46.310760   \n",
              "1       2018-04-01 00:01:00   2.465394   47.09201  53.211800  46.310760   \n",
              "2       2018-04-01 00:02:00   2.444734   47.35243  53.211800  46.397570   \n",
              "3       2018-04-01 00:03:00   2.460474   47.09201  53.168400  46.397568   \n",
              "4       2018-04-01 00:04:00   2.445718   47.13541  53.211800  46.397568   \n",
              "...                     ...        ...        ...        ...        ...   \n",
              "220315  2018-08-31 23:55:00   2.407350   47.69965  50.520830  43.142361   \n",
              "220316  2018-08-31 23:56:00   2.400463   47.69965  50.564240  43.142361   \n",
              "220317  2018-08-31 23:57:00   2.396528   47.69965  50.520830  43.142361   \n",
              "220318  2018-08-31 23:58:00   2.406366   47.69965  50.520832  43.142361   \n",
              "220319  2018-08-31 23:59:00   2.396528   47.69965  50.520832  43.142361   \n",
              "\n",
              "         sensor_04  sensor_05  sensor_06  sensor_07  sensor_08  ...  \\\n",
              "0       634.375000   76.45975   13.41146   16.13136   15.56713  ...   \n",
              "1       634.375000   76.45975   13.41146   16.13136   15.56713  ...   \n",
              "2       638.888900   73.54598   13.32465   16.03733   15.61777  ...   \n",
              "3       628.125000   76.98898   13.31742   16.24711   15.69734  ...   \n",
              "4       636.458300   76.58897   13.35359   16.21094   15.69734  ...   \n",
              "...            ...        ...        ...        ...        ...  ...   \n",
              "220315  634.722229   64.59095   15.11863   16.65220   15.65393  ...   \n",
              "220316  630.902771   65.83363   15.15480   16.70284   15.65393  ...   \n",
              "220317  625.925903   67.29445   15.08970   16.70284   15.69734  ...   \n",
              "220318  635.648100   65.09175   15.11863   16.56539   15.74074  ...   \n",
              "220319  639.814800   65.45634   15.11863   16.65220   15.65393  ...   \n",
              "\n",
              "        sensor_43  sensor_44  sensor_45  sensor_46  sensor_47  sensor_48  \\\n",
              "0        41.92708  39.641200   65.68287   50.92593  38.194440   157.9861   \n",
              "1        41.92708  39.641200   65.68287   50.92593  38.194440   157.9861   \n",
              "2        41.66666  39.351852   65.39352   51.21528  38.194443   155.9606   \n",
              "3        40.88541  39.062500   64.81481   51.21528  38.194440   155.9606   \n",
              "4        41.40625  38.773150   65.10416   51.79398  38.773150   158.2755   \n",
              "...           ...        ...        ...        ...        ...        ...   \n",
              "220315   38.28125  68.287030   52.37268   48.32176  41.087960   212.3843   \n",
              "220316   38.28125  66.840280   50.63657   48.03241  40.798610   213.8310   \n",
              "220317   39.06250  65.393520   48.90046   48.03241  40.798610   217.3032   \n",
              "220318   40.62500  64.236110   47.74306   48.32176  40.509258   222.5116   \n",
              "220319   41.40625  62.789350   46.29630   48.90046  40.219910   227.4306   \n",
              "\n",
              "        sensor_49  sensor_50  sensor_51  machine_status  \n",
              "0        67.70834  243.05560   201.3889          NORMAL  \n",
              "1        67.70834  243.05560   201.3889          NORMAL  \n",
              "2        67.12963  241.31940   203.7037          NORMAL  \n",
              "3        66.84028  240.45140   203.1250          NORMAL  \n",
              "4        66.55093  242.18750   201.3889          NORMAL  \n",
              "...           ...        ...        ...             ...  \n",
              "220315  153.64580  183.04926   231.1921          NORMAL  \n",
              "220316  156.25000  183.04926   231.1921          NORMAL  \n",
              "220317  155.38190  183.04926   232.0602          NORMAL  \n",
              "220318  153.93520  183.04926   234.0856          NORMAL  \n",
              "220319  150.46300  183.04926   234.0856          NORMAL  \n",
              "\n",
              "[220320 rows x 53 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-bbaf9813-0610-4f33-adee-fe835bbbf66a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>timestamp</th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_43</th>\n",
              "      <th>sensor_44</th>\n",
              "      <th>sensor_45</th>\n",
              "      <th>sensor_46</th>\n",
              "      <th>sensor_47</th>\n",
              "      <th>sensor_48</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>machine_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-04-01 00:00:00</td>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>...</td>\n",
              "      <td>41.92708</td>\n",
              "      <td>39.641200</td>\n",
              "      <td>65.68287</td>\n",
              "      <td>50.92593</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>157.9861</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-04-01 00:01:00</td>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>...</td>\n",
              "      <td>41.92708</td>\n",
              "      <td>39.641200</td>\n",
              "      <td>65.68287</td>\n",
              "      <td>50.92593</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>157.9861</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-04-01 00:02:00</td>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>...</td>\n",
              "      <td>41.66666</td>\n",
              "      <td>39.351852</td>\n",
              "      <td>65.39352</td>\n",
              "      <td>51.21528</td>\n",
              "      <td>38.194443</td>\n",
              "      <td>155.9606</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-04-01 00:03:00</td>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>...</td>\n",
              "      <td>40.88541</td>\n",
              "      <td>39.062500</td>\n",
              "      <td>64.81481</td>\n",
              "      <td>51.21528</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>155.9606</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-04-01 00:04:00</td>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>...</td>\n",
              "      <td>41.40625</td>\n",
              "      <td>38.773150</td>\n",
              "      <td>65.10416</td>\n",
              "      <td>51.79398</td>\n",
              "      <td>38.773150</td>\n",
              "      <td>158.2755</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2018-08-31 23:55:00</td>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>...</td>\n",
              "      <td>38.28125</td>\n",
              "      <td>68.287030</td>\n",
              "      <td>52.37268</td>\n",
              "      <td>48.32176</td>\n",
              "      <td>41.087960</td>\n",
              "      <td>212.3843</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2018-08-31 23:56:00</td>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>...</td>\n",
              "      <td>38.28125</td>\n",
              "      <td>66.840280</td>\n",
              "      <td>50.63657</td>\n",
              "      <td>48.03241</td>\n",
              "      <td>40.798610</td>\n",
              "      <td>213.8310</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2018-08-31 23:57:00</td>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>...</td>\n",
              "      <td>39.06250</td>\n",
              "      <td>65.393520</td>\n",
              "      <td>48.90046</td>\n",
              "      <td>48.03241</td>\n",
              "      <td>40.798610</td>\n",
              "      <td>217.3032</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2018-08-31 23:58:00</td>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>...</td>\n",
              "      <td>40.62500</td>\n",
              "      <td>64.236110</td>\n",
              "      <td>47.74306</td>\n",
              "      <td>48.32176</td>\n",
              "      <td>40.509258</td>\n",
              "      <td>222.5116</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2018-08-31 23:59:00</td>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>...</td>\n",
              "      <td>41.40625</td>\n",
              "      <td>62.789350</td>\n",
              "      <td>46.29630</td>\n",
              "      <td>48.90046</td>\n",
              "      <td>40.219910</td>\n",
              "      <td>227.4306</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 53 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bbaf9813-0610-4f33-adee-fe835bbbf66a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-bbaf9813-0610-4f33-adee-fe835bbbf66a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-bbaf9813-0610-4f33-adee-fe835bbbf66a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "timestamp -- столбец, конкатенирующий в себе несколько значений\n",
        "разобьем его на year,month, number, hours,minutes, seconds"
      ],
      "metadata": {
        "id": "zaBoty8jKHRX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df[['year','month', 'number']] = df.timestamp.str.split(\"-\", expand=True)"
      ],
      "metadata": {
        "id": "0DMxqqtCHBF3"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[['number','time']] = df.number.str.split(\" \", expand=True)"
      ],
      "metadata": {
        "id": "1In4pM1KI3au"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df[['hours','minutes', 'seconds']] = df.time.str.split(\":\", expand=True)"
      ],
      "metadata": {
        "id": "F2PUX5JJJPEK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 641
        },
        "id": "RCZAxuB_H8Ji",
        "outputId": "f5d07684-7ac8-4096-da69-b64566ec5a80"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                  timestamp  sensor_00  sensor_01  sensor_02  sensor_03  \\\n",
              "0       2018-04-01 00:00:00   2.465394   47.09201  53.211800  46.310760   \n",
              "1       2018-04-01 00:01:00   2.465394   47.09201  53.211800  46.310760   \n",
              "2       2018-04-01 00:02:00   2.444734   47.35243  53.211800  46.397570   \n",
              "3       2018-04-01 00:03:00   2.460474   47.09201  53.168400  46.397568   \n",
              "4       2018-04-01 00:04:00   2.445718   47.13541  53.211800  46.397568   \n",
              "...                     ...        ...        ...        ...        ...   \n",
              "220315  2018-08-31 23:55:00   2.407350   47.69965  50.520830  43.142361   \n",
              "220316  2018-08-31 23:56:00   2.400463   47.69965  50.564240  43.142361   \n",
              "220317  2018-08-31 23:57:00   2.396528   47.69965  50.520830  43.142361   \n",
              "220318  2018-08-31 23:58:00   2.406366   47.69965  50.520832  43.142361   \n",
              "220319  2018-08-31 23:59:00   2.396528   47.69965  50.520832  43.142361   \n",
              "\n",
              "         sensor_04  sensor_05  sensor_06  sensor_07  sensor_08  ...  \\\n",
              "0       634.375000   76.45975   13.41146   16.13136   15.56713  ...   \n",
              "1       634.375000   76.45975   13.41146   16.13136   15.56713  ...   \n",
              "2       638.888900   73.54598   13.32465   16.03733   15.61777  ...   \n",
              "3       628.125000   76.98898   13.31742   16.24711   15.69734  ...   \n",
              "4       636.458300   76.58897   13.35359   16.21094   15.69734  ...   \n",
              "...            ...        ...        ...        ...        ...  ...   \n",
              "220315  634.722229   64.59095   15.11863   16.65220   15.65393  ...   \n",
              "220316  630.902771   65.83363   15.15480   16.70284   15.65393  ...   \n",
              "220317  625.925903   67.29445   15.08970   16.70284   15.69734  ...   \n",
              "220318  635.648100   65.09175   15.11863   16.56539   15.74074  ...   \n",
              "220319  639.814800   65.45634   15.11863   16.65220   15.65393  ...   \n",
              "\n",
              "        sensor_50  sensor_51  machine_status  year  month  number      time  \\\n",
              "0       243.05560   201.3889          NORMAL  2018     04      01  00:00:00   \n",
              "1       243.05560   201.3889          NORMAL  2018     04      01  00:01:00   \n",
              "2       241.31940   203.7037          NORMAL  2018     04      01  00:02:00   \n",
              "3       240.45140   203.1250          NORMAL  2018     04      01  00:03:00   \n",
              "4       242.18750   201.3889          NORMAL  2018     04      01  00:04:00   \n",
              "...           ...        ...             ...   ...    ...     ...       ...   \n",
              "220315  183.04926   231.1921          NORMAL  2018     08      31  23:55:00   \n",
              "220316  183.04926   231.1921          NORMAL  2018     08      31  23:56:00   \n",
              "220317  183.04926   232.0602          NORMAL  2018     08      31  23:57:00   \n",
              "220318  183.04926   234.0856          NORMAL  2018     08      31  23:58:00   \n",
              "220319  183.04926   234.0856          NORMAL  2018     08      31  23:59:00   \n",
              "\n",
              "        hours  minutes  seconds  \n",
              "0          00       00       00  \n",
              "1          00       01       00  \n",
              "2          00       02       00  \n",
              "3          00       03       00  \n",
              "4          00       04       00  \n",
              "...       ...      ...      ...  \n",
              "220315     23       55       00  \n",
              "220316     23       56       00  \n",
              "220317     23       57       00  \n",
              "220318     23       58       00  \n",
              "220319     23       59       00  \n",
              "\n",
              "[220320 rows x 60 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3e52a481-ffa9-40a6-a538-8ce8b51e365b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>timestamp</th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>machine_status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>number</th>\n",
              "      <th>time</th>\n",
              "      <th>hours</th>\n",
              "      <th>minutes</th>\n",
              "      <th>seconds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2018-04-01 00:00:00</td>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>...</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00:00:00</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2018-04-01 00:01:00</td>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>...</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00:01:00</td>\n",
              "      <td>00</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2018-04-01 00:02:00</td>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>...</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00:02:00</td>\n",
              "      <td>00</td>\n",
              "      <td>02</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2018-04-01 00:03:00</td>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>...</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00:03:00</td>\n",
              "      <td>00</td>\n",
              "      <td>03</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2018-04-01 00:04:00</td>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>...</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00:04:00</td>\n",
              "      <td>00</td>\n",
              "      <td>04</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2018-08-31 23:55:00</td>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>...</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23:55:00</td>\n",
              "      <td>23</td>\n",
              "      <td>55</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2018-08-31 23:56:00</td>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>...</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23:56:00</td>\n",
              "      <td>23</td>\n",
              "      <td>56</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2018-08-31 23:57:00</td>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>...</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23:57:00</td>\n",
              "      <td>23</td>\n",
              "      <td>57</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2018-08-31 23:58:00</td>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>...</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23:58:00</td>\n",
              "      <td>23</td>\n",
              "      <td>58</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2018-08-31 23:59:00</td>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>...</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23:59:00</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 60 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3e52a481-ffa9-40a6-a538-8ce8b51e365b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3e52a481-ffa9-40a6-a538-8ce8b51e365b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3e52a481-ffa9-40a6-a538-8ce8b51e365b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns=['timestamp','time'], inplace=True)\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "fXGafv1VH6mM",
        "outputId": "4b5323a0-fcd2-452b-acc7-5105d6b3cf32"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        sensor_00  sensor_01  sensor_02  sensor_03   sensor_04  sensor_05  \\\n",
              "0        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "1        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "2        2.444734   47.35243  53.211800  46.397570  638.888900   73.54598   \n",
              "3        2.460474   47.09201  53.168400  46.397568  628.125000   76.98898   \n",
              "4        2.445718   47.13541  53.211800  46.397568  636.458300   76.58897   \n",
              "...           ...        ...        ...        ...         ...        ...   \n",
              "220315   2.407350   47.69965  50.520830  43.142361  634.722229   64.59095   \n",
              "220316   2.400463   47.69965  50.564240  43.142361  630.902771   65.83363   \n",
              "220317   2.396528   47.69965  50.520830  43.142361  625.925903   67.29445   \n",
              "220318   2.406366   47.69965  50.520832  43.142361  635.648100   65.09175   \n",
              "220319   2.396528   47.69965  50.520832  43.142361  639.814800   65.45634   \n",
              "\n",
              "        sensor_06  sensor_07  sensor_08  sensor_09  ...  sensor_49  sensor_50  \\\n",
              "0        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "1        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "2        13.32465   16.03733   15.61777   15.01013  ...   67.12963  241.31940   \n",
              "3        13.31742   16.24711   15.69734   15.08247  ...   66.84028  240.45140   \n",
              "4        13.35359   16.21094   15.69734   15.08247  ...   66.55093  242.18750   \n",
              "...           ...        ...        ...        ...  ...        ...        ...   \n",
              "220315   15.11863   16.65220   15.65393   15.16204  ...  153.64580  183.04926   \n",
              "220316   15.15480   16.70284   15.65393   15.11863  ...  156.25000  183.04926   \n",
              "220317   15.08970   16.70284   15.69734   15.11863  ...  155.38190  183.04926   \n",
              "220318   15.11863   16.56539   15.74074   15.11863  ...  153.93520  183.04926   \n",
              "220319   15.11863   16.65220   15.65393   15.01013  ...  150.46300  183.04926   \n",
              "\n",
              "        sensor_51  machine_status  year  month  number  hours  minutes  \\\n",
              "0        201.3889          NORMAL  2018     04      01     00       00   \n",
              "1        201.3889          NORMAL  2018     04      01     00       01   \n",
              "2        203.7037          NORMAL  2018     04      01     00       02   \n",
              "3        203.1250          NORMAL  2018     04      01     00       03   \n",
              "4        201.3889          NORMAL  2018     04      01     00       04   \n",
              "...           ...             ...   ...    ...     ...    ...      ...   \n",
              "220315   231.1921          NORMAL  2018     08      31     23       55   \n",
              "220316   231.1921          NORMAL  2018     08      31     23       56   \n",
              "220317   232.0602          NORMAL  2018     08      31     23       57   \n",
              "220318   234.0856          NORMAL  2018     08      31     23       58   \n",
              "220319   234.0856          NORMAL  2018     08      31     23       59   \n",
              "\n",
              "        seconds  \n",
              "0            00  \n",
              "1            00  \n",
              "2            00  \n",
              "3            00  \n",
              "4            00  \n",
              "...         ...  \n",
              "220315       00  \n",
              "220316       00  \n",
              "220317       00  \n",
              "220318       00  \n",
              "220319       00  \n",
              "\n",
              "[220320 rows x 58 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-31e13c06-2426-47e2-b9f1-a1f49713e6d6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>sensor_09</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>machine_status</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>number</th>\n",
              "      <th>hours</th>\n",
              "      <th>minutes</th>\n",
              "      <th>seconds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>02</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>03</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>04</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.16204</td>\n",
              "      <td>...</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>55</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>56</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>57</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>58</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>NORMAL</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 58 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-31e13c06-2426-47e2-b9f1-a1f49713e6d6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-31e13c06-2426-47e2-b9f1-a1f49713e6d6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-31e13c06-2426-47e2-b9f1-a1f49713e6d6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data = df.machine_status\n"
      ],
      "metadata": {
        "id": "eCVGvhhLLF9N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop(columns=['machine_status'], inplace=True)\n",
        "df['machine_status']=data\n",
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "yjaGDLPMMkbJ",
        "outputId": "298c1e3f-989e-4450-8b43-73293181ba0b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        sensor_00  sensor_01  sensor_02  sensor_03   sensor_04  sensor_05  \\\n",
              "0        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "1        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "2        2.444734   47.35243  53.211800  46.397570  638.888900   73.54598   \n",
              "3        2.460474   47.09201  53.168400  46.397568  628.125000   76.98898   \n",
              "4        2.445718   47.13541  53.211800  46.397568  636.458300   76.58897   \n",
              "...           ...        ...        ...        ...         ...        ...   \n",
              "220315   2.407350   47.69965  50.520830  43.142361  634.722229   64.59095   \n",
              "220316   2.400463   47.69965  50.564240  43.142361  630.902771   65.83363   \n",
              "220317   2.396528   47.69965  50.520830  43.142361  625.925903   67.29445   \n",
              "220318   2.406366   47.69965  50.520832  43.142361  635.648100   65.09175   \n",
              "220319   2.396528   47.69965  50.520832  43.142361  639.814800   65.45634   \n",
              "\n",
              "        sensor_06  sensor_07  sensor_08  sensor_09  ...  sensor_49  sensor_50  \\\n",
              "0        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "1        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "2        13.32465   16.03733   15.61777   15.01013  ...   67.12963  241.31940   \n",
              "3        13.31742   16.24711   15.69734   15.08247  ...   66.84028  240.45140   \n",
              "4        13.35359   16.21094   15.69734   15.08247  ...   66.55093  242.18750   \n",
              "...           ...        ...        ...        ...  ...        ...        ...   \n",
              "220315   15.11863   16.65220   15.65393   15.16204  ...  153.64580  183.04926   \n",
              "220316   15.15480   16.70284   15.65393   15.11863  ...  156.25000  183.04926   \n",
              "220317   15.08970   16.70284   15.69734   15.11863  ...  155.38190  183.04926   \n",
              "220318   15.11863   16.56539   15.74074   15.11863  ...  153.93520  183.04926   \n",
              "220319   15.11863   16.65220   15.65393   15.01013  ...  150.46300  183.04926   \n",
              "\n",
              "        sensor_51  year  month  number  hours  minutes  seconds  \\\n",
              "0        201.3889  2018     04      01     00       00       00   \n",
              "1        201.3889  2018     04      01     00       01       00   \n",
              "2        203.7037  2018     04      01     00       02       00   \n",
              "3        203.1250  2018     04      01     00       03       00   \n",
              "4        201.3889  2018     04      01     00       04       00   \n",
              "...           ...   ...    ...     ...    ...      ...      ...   \n",
              "220315   231.1921  2018     08      31     23       55       00   \n",
              "220316   231.1921  2018     08      31     23       56       00   \n",
              "220317   232.0602  2018     08      31     23       57       00   \n",
              "220318   234.0856  2018     08      31     23       58       00   \n",
              "220319   234.0856  2018     08      31     23       59       00   \n",
              "\n",
              "        machine_status  \n",
              "0               NORMAL  \n",
              "1               NORMAL  \n",
              "2               NORMAL  \n",
              "3               NORMAL  \n",
              "4               NORMAL  \n",
              "...                ...  \n",
              "220315          NORMAL  \n",
              "220316          NORMAL  \n",
              "220317          NORMAL  \n",
              "220318          NORMAL  \n",
              "220319          NORMAL  \n",
              "\n",
              "[220320 rows x 58 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-6c21c78a-8182-4ebe-8887-cd4a6b5d9937\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>sensor_09</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>number</th>\n",
              "      <th>hours</th>\n",
              "      <th>minutes</th>\n",
              "      <th>seconds</th>\n",
              "      <th>machine_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>02</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>03</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>04</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.16204</td>\n",
              "      <td>...</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>55</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>56</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>57</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>58</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 58 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c21c78a-8182-4ebe-8887-cd4a6b5d9937')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-6c21c78a-8182-4ebe-8887-cd4a6b5d9937 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-6c21c78a-8182-4ebe-8887-cd4a6b5d9937');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "3zlgjraXM6gY",
        "outputId": "58ed786d-6c19-4638-b3ac-a5f6c84e42ab"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        sensor_00  sensor_01  sensor_02  sensor_03   sensor_04  sensor_05  \\\n",
              "0        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "1        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "2        2.444734   47.35243  53.211800  46.397570  638.888900   73.54598   \n",
              "3        2.460474   47.09201  53.168400  46.397568  628.125000   76.98898   \n",
              "4        2.445718   47.13541  53.211800  46.397568  636.458300   76.58897   \n",
              "...           ...        ...        ...        ...         ...        ...   \n",
              "220315   2.407350   47.69965  50.520830  43.142361  634.722229   64.59095   \n",
              "220316   2.400463   47.69965  50.564240  43.142361  630.902771   65.83363   \n",
              "220317   2.396528   47.69965  50.520830  43.142361  625.925903   67.29445   \n",
              "220318   2.406366   47.69965  50.520832  43.142361  635.648100   65.09175   \n",
              "220319   2.396528   47.69965  50.520832  43.142361  639.814800   65.45634   \n",
              "\n",
              "        sensor_06  sensor_07  sensor_08  sensor_09  ...  sensor_49  sensor_50  \\\n",
              "0        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "1        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "2        13.32465   16.03733   15.61777   15.01013  ...   67.12963  241.31940   \n",
              "3        13.31742   16.24711   15.69734   15.08247  ...   66.84028  240.45140   \n",
              "4        13.35359   16.21094   15.69734   15.08247  ...   66.55093  242.18750   \n",
              "...           ...        ...        ...        ...  ...        ...        ...   \n",
              "220315   15.11863   16.65220   15.65393   15.16204  ...  153.64580  183.04926   \n",
              "220316   15.15480   16.70284   15.65393   15.11863  ...  156.25000  183.04926   \n",
              "220317   15.08970   16.70284   15.69734   15.11863  ...  155.38190  183.04926   \n",
              "220318   15.11863   16.56539   15.74074   15.11863  ...  153.93520  183.04926   \n",
              "220319   15.11863   16.65220   15.65393   15.01013  ...  150.46300  183.04926   \n",
              "\n",
              "        sensor_51  year  month  number  hours  minutes  seconds  \\\n",
              "0        201.3889  2018     04      01     00       00       00   \n",
              "1        201.3889  2018     04      01     00       01       00   \n",
              "2        203.7037  2018     04      01     00       02       00   \n",
              "3        203.1250  2018     04      01     00       03       00   \n",
              "4        201.3889  2018     04      01     00       04       00   \n",
              "...           ...   ...    ...     ...    ...      ...      ...   \n",
              "220315   231.1921  2018     08      31     23       55       00   \n",
              "220316   231.1921  2018     08      31     23       56       00   \n",
              "220317   232.0602  2018     08      31     23       57       00   \n",
              "220318   234.0856  2018     08      31     23       58       00   \n",
              "220319   234.0856  2018     08      31     23       59       00   \n",
              "\n",
              "        machine_status  \n",
              "0               NORMAL  \n",
              "1               NORMAL  \n",
              "2               NORMAL  \n",
              "3               NORMAL  \n",
              "4               NORMAL  \n",
              "...                ...  \n",
              "220315          NORMAL  \n",
              "220316          NORMAL  \n",
              "220317          NORMAL  \n",
              "220318          NORMAL  \n",
              "220319          NORMAL  \n",
              "\n",
              "[220320 rows x 58 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-270a15fb-07a7-41d5-8fbd-12d2ceb8b5db\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>sensor_09</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>number</th>\n",
              "      <th>hours</th>\n",
              "      <th>minutes</th>\n",
              "      <th>seconds</th>\n",
              "      <th>machine_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>02</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>03</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>04</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.16204</td>\n",
              "      <td>...</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>55</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>56</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>57</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>58</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>00</td>\n",
              "      <td>NORMAL</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 58 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-270a15fb-07a7-41d5-8fbd-12d2ceb8b5db')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-270a15fb-07a7-41d5-8fbd-12d2ceb8b5db button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-270a15fb-07a7-41d5-8fbd-12d2ceb8b5db');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "ПРЕДВАРИТЕЛЬНОЕ ИЗУЧЕНИЕ"
      ],
      "metadata": {
        "id": "VE8iB2mGCXPf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Гистограмма позволяет определить форму распределения, а также выбросы и аномалии выбраного столбца"
      ],
      "metadata": {
        "id": "ztCN5E5VCkyj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.hist(df['sensor_00'], bins=30)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 670
        },
        "id": "kqd-pSAn-YOa",
        "outputId": "dd578188-e1d9-47db-ac86-243028ab1b04"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([3.1400e+03, 9.8500e+02, 1.0000e+00, 6.4900e+02, 4.0200e+02,\n",
              "        4.0900e+02, 2.1800e+02, 3.9200e+02, 2.5200e+02, 1.2400e+02,\n",
              "        7.0000e+01, 9.3000e+01, 1.7100e+02, 1.9600e+02, 2.4600e+02,\n",
              "        1.7800e+02, 1.1700e+02, 1.3300e+02, 8.7000e+01, 7.9000e+01,\n",
              "        1.2600e+02, 1.6700e+02, 6.4400e+02, 1.3230e+03, 6.6300e+02,\n",
              "        1.9240e+03, 1.0680e+03, 1.9678e+04, 9.9945e+04, 8.6840e+04]),\n",
              " array([0.       , 0.0849672, 0.1699344, 0.2549016, 0.3398688, 0.424836 ,\n",
              "        0.5098032, 0.5947704, 0.6797376, 0.7647048, 0.849672 , 0.9346392,\n",
              "        1.0196064, 1.1045736, 1.1895408, 1.274508 , 1.3594752, 1.4444424,\n",
              "        1.5294096, 1.6143768, 1.699344 , 1.7843112, 1.8692784, 1.9542456,\n",
              "        2.0392128, 2.12418  , 2.2091472, 2.2941144, 2.3790816, 2.4640488,\n",
              "        2.549016 ]),\n",
              " <BarContainer object of 30 artists>)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ящик с усами представляет распределение данных через квартили, медиану и выбросы\n",
        "\n"
      ],
      "metadata": {
        "id": "eBlxMWGRCo0b"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.boxplot(df['sensor_04'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 578
        },
        "id": "Rt1H3mRE-v8G",
        "outputId": "c0abf2cc-b360-43eb-db99-20a4dff67fbc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'whiskers': [<matplotlib.lines.Line2D at 0x7f43c37245b0>,\n",
              "  <matplotlib.lines.Line2D at 0x7f43c3724850>],\n",
              " 'caps': [<matplotlib.lines.Line2D at 0x7f43c3724af0>,\n",
              "  <matplotlib.lines.Line2D at 0x7f43c3724d90>],\n",
              " 'boxes': [<matplotlib.lines.Line2D at 0x7f43c3724310>],\n",
              " 'medians': [<matplotlib.lines.Line2D at 0x7f43c3725030>],\n",
              " 'fliers': [<matplotlib.lines.Line2D at 0x7f43c37252d0>],\n",
              " 'means': []}"
            ]
          },
          "metadata": {},
          "execution_count": 28
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Линейный график показывает изменение значения переменной по другой независимой переменной"
      ],
      "metadata": {
        "id": "W4boQc0xCuh-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(df['sensor_05'], df['machine_status'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "hsKGtqX5-34b",
        "outputId": "048e1c6e-b211-42bb-e144-eace38879e92"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f43c32c3f10>]"
            ]
          },
          "metadata": {},
          "execution_count": 29
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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HngAK1aswDHHHIO777677PKZTAZbtmzBG2+8gf/4j//Aiy++iI9+9KNV17tixQqsW7eu7LQ33ngD9913H5YuXVrzWG6++WZ87nOfw09/+lPMzrbfDjg35U7VH9NAkXYIQ21JBe0WwzEjc9I8OmmGIdRrznO5M2wnrTT1mIxAoAFAIqajvzSF6SYrrd7uTjMjzW25k04aaT5tJ9KOO+44DA8P46qrrqp5/h133IGf/exn+D//5//gH/7hH7By5UqsWbMG3//+9/GhD30I//AP/4CpKfNFp2kahoeHsXTpUrzjHe/AOeecg0cffRTj4+U5XB/4wAewY8eOMjfuhz/8Id7znvdg8eLFVcfxyiuv4KGHHsLFF1+M1atX4+c//3lIj0DjcBNmO97gnjTAunmAThopIl0lN45LK+C3J21yLq++NLltMVA5aRE5aVFkpEm8DIXU2ziwdaL+3k4re5dE2vaJLCbY/0qahCbqLWZsIc466yyMjo7izDPPxMc//nG89NJLWL58Oe6++26ccsopEELgpJNOwgsvvIAXX3yx6vcfeughHH300bjrrrtw8sknY926dbjwwgtVyXHbtm047bTT8Ic//AFjY2Po6yu+SI855hgceuihEEJgamoKP/jBDwAAq1evxrXXXovLL78cJ598clnJ87LLLsOGDRtw55134tvf/jbuuusu3Hfffer8Bx54AMceeyx2796NoaGhuvc9m80im82qf4+Pj2PFihUYGxtDJpPx8WjWZi5vYPWl94R2fYQQQkg78+rV7w/1+sbHxzE4OOjq87vtnDQAOOWUU3DooYfiy1/+ctV5GzduxP7771/z9+TpGzduVKeNjY2hv78ffX19WLJkCe6//36cd955SqBZOfvss3HHHXdgampKCbkPfOADVZczDAPr1q3DJz7xCQDAaaedhgcffBCvvPKKr/sLAFdddRUGBwfVz4oVK3xflxMNSNEghBBCiAvaUqQBwDXXXIMf/vCH2LBhQ9V5XszBgYEBPPXUU3j88cfxjW98A29961vxta99reZl16xZgze96U342c9+hltuuQWf/OQnEY9XN/7ee++9mJqawvve9z4AwMKFC3H88cfjlltucX1clVxyySUYGxtTP5s2bfJ9XU4kIuovIYQQQog3vI8WtQjvfOc7ccIJJ+CSSy7BWWedpU5fvXp1TeEGQJ2+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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(df['sensor_14'], df['machine_status'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "LUN2pvOu_OAz",
        "outputId": "2640dbb0-612c-400e-f008-36d8f3f49eb4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f43d00ae4d0>]"
            ]
          },
          "metadata": {},
          "execution_count": 30
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.plot(df['sensor_35'], df['machine_status'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "bQ-l_ixf_TI4",
        "outputId": "904a0e1d-36bd-4b4a-df36-41331c1e6362"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f43c170c1f0>]"
            ]
          },
          "metadata": {},
          "execution_count": 31
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Диаграмма рассеяния помогает идентифицировать корреляцию, кластеры, выбросы"
      ],
      "metadata": {
        "id": "3DnWn4SzC1VO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.scatter(df['sensor_35'], df['machine_status'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 448
        },
        "id": "-Hu1ayNk-78B",
        "outputId": "24417f55-3700-48e4-913e-7d97a0ba5406"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f43c13d3c10>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "#МОДУЛЬ В"
      ],
      "metadata": {
        "id": "w6mx6ca5Ulh7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "labelencoder = LabelEncoder()\n",
        "data_new = labelencoder.fit_transform(df.machine_status)\n",
        "data_new\n",
        "data = df\n",
        "data[\"machine_status\"]=data_new\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "N0GhEBxjV1Y5",
        "outputId": "3de4df78-3640-4213-c78c-2359da9d3334"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        sensor_00  sensor_01  sensor_02  sensor_03   sensor_04  sensor_05  \\\n",
              "0        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "1        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "2        2.444734   47.35243  53.211800  46.397570  638.888900   73.54598   \n",
              "3        2.460474   47.09201  53.168400  46.397568  628.125000   76.98898   \n",
              "4        2.445718   47.13541  53.211800  46.397568  636.458300   76.58897   \n",
              "...           ...        ...        ...        ...         ...        ...   \n",
              "220315   2.407350   47.69965  50.520830  43.142361  634.722229   64.59095   \n",
              "220316   2.400463   47.69965  50.564240  43.142361  630.902771   65.83363   \n",
              "220317   2.396528   47.69965  50.520830  43.142361  625.925903   67.29445   \n",
              "220318   2.406366   47.69965  50.520832  43.142361  635.648100   65.09175   \n",
              "220319   2.396528   47.69965  50.520832  43.142361  639.814800   65.45634   \n",
              "\n",
              "        sensor_06  sensor_07  sensor_08  sensor_09  ...  sensor_49  sensor_50  \\\n",
              "0        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "1        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "2        13.32465   16.03733   15.61777   15.01013  ...   67.12963  241.31940   \n",
              "3        13.31742   16.24711   15.69734   15.08247  ...   66.84028  240.45140   \n",
              "4        13.35359   16.21094   15.69734   15.08247  ...   66.55093  242.18750   \n",
              "...           ...        ...        ...        ...  ...        ...        ...   \n",
              "220315   15.11863   16.65220   15.65393   15.16204  ...  153.64580  183.04926   \n",
              "220316   15.15480   16.70284   15.65393   15.11863  ...  156.25000  183.04926   \n",
              "220317   15.08970   16.70284   15.69734   15.11863  ...  155.38190  183.04926   \n",
              "220318   15.11863   16.56539   15.74074   15.11863  ...  153.93520  183.04926   \n",
              "220319   15.11863   16.65220   15.65393   15.01013  ...  150.46300  183.04926   \n",
              "\n",
              "        sensor_51  year  month  number  hours  minutes  seconds  \\\n",
              "0        201.3889  2018     04      01     00       00       00   \n",
              "1        201.3889  2018     04      01     00       01       00   \n",
              "2        203.7037  2018     04      01     00       02       00   \n",
              "3        203.1250  2018     04      01     00       03       00   \n",
              "4        201.3889  2018     04      01     00       04       00   \n",
              "...           ...   ...    ...     ...    ...      ...      ...   \n",
              "220315   231.1921  2018     08      31     23       55       00   \n",
              "220316   231.1921  2018     08      31     23       56       00   \n",
              "220317   232.0602  2018     08      31     23       57       00   \n",
              "220318   234.0856  2018     08      31     23       58       00   \n",
              "220319   234.0856  2018     08      31     23       59       00   \n",
              "\n",
              "        machine_status  \n",
              "0                    1  \n",
              "1                    1  \n",
              "2                    1  \n",
              "3                    1  \n",
              "4                    1  \n",
              "...                ...  \n",
              "220315               1  \n",
              "220316               1  \n",
              "220317               1  \n",
              "220318               1  \n",
              "220319               1  \n",
              "\n",
              "[220320 rows x 58 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-cf345477-cb73-4536-9d1a-06d4db31d1e3\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>sensor_09</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>number</th>\n",
              "      <th>hours</th>\n",
              "      <th>minutes</th>\n",
              "      <th>seconds</th>\n",
              "      <th>machine_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>02</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>03</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>04</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.16204</td>\n",
              "      <td>...</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>55</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>56</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>57</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>58</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 58 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-cf345477-cb73-4536-9d1a-06d4db31d1e3')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-cf345477-cb73-4536-9d1a-06d4db31d1e3 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-cf345477-cb73-4536-9d1a-06d4db31d1e3');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "L5AbpUDwZYuq",
        "outputId": "1f572e5b-8ced-4434-f470-1eb7994fcbd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        sensor_00  sensor_01  sensor_02  sensor_03   sensor_04  sensor_05  \\\n",
              "0        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "1        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "2        2.444734   47.35243  53.211800  46.397570  638.888900   73.54598   \n",
              "3        2.460474   47.09201  53.168400  46.397568  628.125000   76.98898   \n",
              "4        2.445718   47.13541  53.211800  46.397568  636.458300   76.58897   \n",
              "...           ...        ...        ...        ...         ...        ...   \n",
              "220315   2.407350   47.69965  50.520830  43.142361  634.722229   64.59095   \n",
              "220316   2.400463   47.69965  50.564240  43.142361  630.902771   65.83363   \n",
              "220317   2.396528   47.69965  50.520830  43.142361  625.925903   67.29445   \n",
              "220318   2.406366   47.69965  50.520832  43.142361  635.648100   65.09175   \n",
              "220319   2.396528   47.69965  50.520832  43.142361  639.814800   65.45634   \n",
              "\n",
              "        sensor_06  sensor_07  sensor_08  sensor_09  ...  sensor_49  sensor_50  \\\n",
              "0        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "1        13.41146   16.13136   15.56713   15.05353  ...   67.70834  243.05560   \n",
              "2        13.32465   16.03733   15.61777   15.01013  ...   67.12963  241.31940   \n",
              "3        13.31742   16.24711   15.69734   15.08247  ...   66.84028  240.45140   \n",
              "4        13.35359   16.21094   15.69734   15.08247  ...   66.55093  242.18750   \n",
              "...           ...        ...        ...        ...  ...        ...        ...   \n",
              "220315   15.11863   16.65220   15.65393   15.16204  ...  153.64580  183.04926   \n",
              "220316   15.15480   16.70284   15.65393   15.11863  ...  156.25000  183.04926   \n",
              "220317   15.08970   16.70284   15.69734   15.11863  ...  155.38190  183.04926   \n",
              "220318   15.11863   16.56539   15.74074   15.11863  ...  153.93520  183.04926   \n",
              "220319   15.11863   16.65220   15.65393   15.01013  ...  150.46300  183.04926   \n",
              "\n",
              "        sensor_51  year  month  number  hours  minutes  seconds  \\\n",
              "0        201.3889  2018     04      01     00       00       00   \n",
              "1        201.3889  2018     04      01     00       01       00   \n",
              "2        203.7037  2018     04      01     00       02       00   \n",
              "3        203.1250  2018     04      01     00       03       00   \n",
              "4        201.3889  2018     04      01     00       04       00   \n",
              "...           ...   ...    ...     ...    ...      ...      ...   \n",
              "220315   231.1921  2018     08      31     23       55       00   \n",
              "220316   231.1921  2018     08      31     23       56       00   \n",
              "220317   232.0602  2018     08      31     23       57       00   \n",
              "220318   234.0856  2018     08      31     23       58       00   \n",
              "220319   234.0856  2018     08      31     23       59       00   \n",
              "\n",
              "        machine_status  \n",
              "0                    1  \n",
              "1                    1  \n",
              "2                    1  \n",
              "3                    1  \n",
              "4                    1  \n",
              "...                ...  \n",
              "220315               1  \n",
              "220316               1  \n",
              "220317               1  \n",
              "220318               1  \n",
              "220319               1  \n",
              "\n",
              "[220320 rows x 58 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b082802f-50b0-4fc9-9866-62ae4c53a581\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>sensor_09</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>number</th>\n",
              "      <th>hours</th>\n",
              "      <th>minutes</th>\n",
              "      <th>seconds</th>\n",
              "      <th>machine_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>02</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>03</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>04</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.16204</td>\n",
              "      <td>...</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>55</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>56</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>57</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>58</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>59</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 58 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b082802f-50b0-4fc9-9866-62ae4c53a581')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-b082802f-50b0-4fc9-9866-62ae4c53a581 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-b082802f-50b0-4fc9-9866-62ae4c53a581');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "data.drop(columns=['minutes',\t'seconds'], inplace=True)\n",
        "data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 487
        },
        "id": "_lcBwsVSZfVC",
        "outputId": "a306dcc9-77a9-4cdb-9751-f9ab837d7570"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        sensor_00  sensor_01  sensor_02  sensor_03   sensor_04  sensor_05  \\\n",
              "0        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "1        2.465394   47.09201  53.211800  46.310760  634.375000   76.45975   \n",
              "2        2.444734   47.35243  53.211800  46.397570  638.888900   73.54598   \n",
              "3        2.460474   47.09201  53.168400  46.397568  628.125000   76.98898   \n",
              "4        2.445718   47.13541  53.211800  46.397568  636.458300   76.58897   \n",
              "...           ...        ...        ...        ...         ...        ...   \n",
              "220315   2.407350   47.69965  50.520830  43.142361  634.722229   64.59095   \n",
              "220316   2.400463   47.69965  50.564240  43.142361  630.902771   65.83363   \n",
              "220317   2.396528   47.69965  50.520830  43.142361  625.925903   67.29445   \n",
              "220318   2.406366   47.69965  50.520832  43.142361  635.648100   65.09175   \n",
              "220319   2.396528   47.69965  50.520832  43.142361  639.814800   65.45634   \n",
              "\n",
              "        sensor_06  sensor_07  sensor_08  sensor_09  ...  sensor_47  sensor_48  \\\n",
              "0        13.41146   16.13136   15.56713   15.05353  ...  38.194440   157.9861   \n",
              "1        13.41146   16.13136   15.56713   15.05353  ...  38.194440   157.9861   \n",
              "2        13.32465   16.03733   15.61777   15.01013  ...  38.194443   155.9606   \n",
              "3        13.31742   16.24711   15.69734   15.08247  ...  38.194440   155.9606   \n",
              "4        13.35359   16.21094   15.69734   15.08247  ...  38.773150   158.2755   \n",
              "...           ...        ...        ...        ...  ...        ...        ...   \n",
              "220315   15.11863   16.65220   15.65393   15.16204  ...  41.087960   212.3843   \n",
              "220316   15.15480   16.70284   15.65393   15.11863  ...  40.798610   213.8310   \n",
              "220317   15.08970   16.70284   15.69734   15.11863  ...  40.798610   217.3032   \n",
              "220318   15.11863   16.56539   15.74074   15.11863  ...  40.509258   222.5116   \n",
              "220319   15.11863   16.65220   15.65393   15.01013  ...  40.219910   227.4306   \n",
              "\n",
              "        sensor_49  sensor_50  sensor_51  year  month  number  hours  \\\n",
              "0        67.70834  243.05560   201.3889  2018     04      01     00   \n",
              "1        67.70834  243.05560   201.3889  2018     04      01     00   \n",
              "2        67.12963  241.31940   203.7037  2018     04      01     00   \n",
              "3        66.84028  240.45140   203.1250  2018     04      01     00   \n",
              "4        66.55093  242.18750   201.3889  2018     04      01     00   \n",
              "...           ...        ...        ...   ...    ...     ...    ...   \n",
              "220315  153.64580  183.04926   231.1921  2018     08      31     23   \n",
              "220316  156.25000  183.04926   231.1921  2018     08      31     23   \n",
              "220317  155.38190  183.04926   232.0602  2018     08      31     23   \n",
              "220318  153.93520  183.04926   234.0856  2018     08      31     23   \n",
              "220319  150.46300  183.04926   234.0856  2018     08      31     23   \n",
              "\n",
              "        machine_status  \n",
              "0                    1  \n",
              "1                    1  \n",
              "2                    1  \n",
              "3                    1  \n",
              "4                    1  \n",
              "...                ...  \n",
              "220315               1  \n",
              "220316               1  \n",
              "220317               1  \n",
              "220318               1  \n",
              "220319               1  \n",
              "\n",
              "[220320 rows x 56 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5d2aa2c2-895e-4075-b845-d8b98a623961\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>sensor_00</th>\n",
              "      <th>sensor_01</th>\n",
              "      <th>sensor_02</th>\n",
              "      <th>sensor_03</th>\n",
              "      <th>sensor_04</th>\n",
              "      <th>sensor_05</th>\n",
              "      <th>sensor_06</th>\n",
              "      <th>sensor_07</th>\n",
              "      <th>sensor_08</th>\n",
              "      <th>sensor_09</th>\n",
              "      <th>...</th>\n",
              "      <th>sensor_47</th>\n",
              "      <th>sensor_48</th>\n",
              "      <th>sensor_49</th>\n",
              "      <th>sensor_50</th>\n",
              "      <th>sensor_51</th>\n",
              "      <th>year</th>\n",
              "      <th>month</th>\n",
              "      <th>number</th>\n",
              "      <th>hours</th>\n",
              "      <th>machine_status</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>157.9861</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2.465394</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.310760</td>\n",
              "      <td>634.375000</td>\n",
              "      <td>76.45975</td>\n",
              "      <td>13.41146</td>\n",
              "      <td>16.13136</td>\n",
              "      <td>15.56713</td>\n",
              "      <td>15.05353</td>\n",
              "      <td>...</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>157.9861</td>\n",
              "      <td>67.70834</td>\n",
              "      <td>243.05560</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2.444734</td>\n",
              "      <td>47.35243</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397570</td>\n",
              "      <td>638.888900</td>\n",
              "      <td>73.54598</td>\n",
              "      <td>13.32465</td>\n",
              "      <td>16.03733</td>\n",
              "      <td>15.61777</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>38.194443</td>\n",
              "      <td>155.9606</td>\n",
              "      <td>67.12963</td>\n",
              "      <td>241.31940</td>\n",
              "      <td>203.7037</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2.460474</td>\n",
              "      <td>47.09201</td>\n",
              "      <td>53.168400</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>628.125000</td>\n",
              "      <td>76.98898</td>\n",
              "      <td>13.31742</td>\n",
              "      <td>16.24711</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>38.194440</td>\n",
              "      <td>155.9606</td>\n",
              "      <td>66.84028</td>\n",
              "      <td>240.45140</td>\n",
              "      <td>203.1250</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2.445718</td>\n",
              "      <td>47.13541</td>\n",
              "      <td>53.211800</td>\n",
              "      <td>46.397568</td>\n",
              "      <td>636.458300</td>\n",
              "      <td>76.58897</td>\n",
              "      <td>13.35359</td>\n",
              "      <td>16.21094</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.08247</td>\n",
              "      <td>...</td>\n",
              "      <td>38.773150</td>\n",
              "      <td>158.2755</td>\n",
              "      <td>66.55093</td>\n",
              "      <td>242.18750</td>\n",
              "      <td>201.3889</td>\n",
              "      <td>2018</td>\n",
              "      <td>04</td>\n",
              "      <td>01</td>\n",
              "      <td>00</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220315</th>\n",
              "      <td>2.407350</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>634.722229</td>\n",
              "      <td>64.59095</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.16204</td>\n",
              "      <td>...</td>\n",
              "      <td>41.087960</td>\n",
              "      <td>212.3843</td>\n",
              "      <td>153.64580</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220316</th>\n",
              "      <td>2.400463</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.564240</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>630.902771</td>\n",
              "      <td>65.83363</td>\n",
              "      <td>15.15480</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>40.798610</td>\n",
              "      <td>213.8310</td>\n",
              "      <td>156.25000</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>231.1921</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220317</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520830</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>625.925903</td>\n",
              "      <td>67.29445</td>\n",
              "      <td>15.08970</td>\n",
              "      <td>16.70284</td>\n",
              "      <td>15.69734</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>40.798610</td>\n",
              "      <td>217.3032</td>\n",
              "      <td>155.38190</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>232.0602</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220318</th>\n",
              "      <td>2.406366</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>635.648100</td>\n",
              "      <td>65.09175</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.56539</td>\n",
              "      <td>15.74074</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>...</td>\n",
              "      <td>40.509258</td>\n",
              "      <td>222.5116</td>\n",
              "      <td>153.93520</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>220319</th>\n",
              "      <td>2.396528</td>\n",
              "      <td>47.69965</td>\n",
              "      <td>50.520832</td>\n",
              "      <td>43.142361</td>\n",
              "      <td>639.814800</td>\n",
              "      <td>65.45634</td>\n",
              "      <td>15.11863</td>\n",
              "      <td>16.65220</td>\n",
              "      <td>15.65393</td>\n",
              "      <td>15.01013</td>\n",
              "      <td>...</td>\n",
              "      <td>40.219910</td>\n",
              "      <td>227.4306</td>\n",
              "      <td>150.46300</td>\n",
              "      <td>183.04926</td>\n",
              "      <td>234.0856</td>\n",
              "      <td>2018</td>\n",
              "      <td>08</td>\n",
              "      <td>31</td>\n",
              "      <td>23</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>220320 rows × 56 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5d2aa2c2-895e-4075-b845-d8b98a623961')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5d2aa2c2-895e-4075-b845-d8b98a623961 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5d2aa2c2-895e-4075-b845-d8b98a623961');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Выделение целевого признака и предикторов"
      ],
      "metadata": {
        "id": "umstuSpPbyoy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y = data['machine_status']\n",
        "X = data.drop(['machine_status'], axis=1)"
      ],
      "metadata": {
        "id": "geB7E_dxaYJL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Балансировка"
      ],
      "metadata": {
        "id": "2r6w29MEb3Zh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.under_sampling import RandomUnderSampler\n",
        "\n",
        "print(f\"Количество объектов каждого класса до under_sampling: \\n{y.value_counts()}\")\n",
        "underSampler = RandomUnderSampler(sampling_strategy='majority')\n",
        "X_under_sample, y_under_sample = underSampler.fit_resample(X, y)\n",
        "print(f\"Количество объектов каждого класса после under_sampling: \\n{y_under_sample.value_counts()}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4oR1oaN8b4Ch",
        "outputId": "d0524cf8-8c23-463c-b942-1f8a0f2eea31"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Количество объектов каждого класса до under_sampling: \n",
            "1    205836\n",
            "2     14477\n",
            "0         7\n",
            "Name: machine_status, dtype: int64\n",
            "Количество объектов каждого класса после under_sampling: \n",
            "2    14477\n",
            "0        7\n",
            "1        7\n",
            "Name: machine_status, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from imblearn.under_sampling import NearMiss"
      ],
      "metadata": {
        "id": "wRMQ8oE-5-At"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nm = NearMiss()\n",
        "X, y = nm.fit_resample(X, y)"
      ],
      "metadata": {
        "id": "B_p0YB_k6F72"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "np.unique(y, return_counts=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HdZfOZFk6GxV",
        "outputId": "c65ad6e1-7cd6-4075-8a61-4e48b9c7ebc6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([0, 1, 2]), array([7, 7, 7]))"
            ]
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###разобьем на обучающую и тестовую выборки рандомным способом в нужном соотношении"
      ],
      "metadata": {
        "id": "r8sKZi0prhnJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_under_sample, y_under_sample, test_size=0.2, random_state = 4)\n",
        "X_train.shape, y_train.shape, X_test.shape, y_test.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rohixJ84cTQG",
        "outputId": "3c2e996e-260c-4270-abcd-aec481c72cd4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((11592, 55), (11592,), (2899, 55), (2899,))"
            ]
          },
          "metadata": {},
          "execution_count": 41
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Масштабируем числовые признаки"
      ],
      "metadata": {
        "id": "cyBTiKeScdO9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "\n",
        "scaler.fit(X_train, y_train)\n",
        "X_train_std = scaler.transform(X_train)\n",
        "X_test_std = scaler.transform(X_test)"
      ],
      "metadata": {
        "id": "zMl3CfugcdZO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Метрики:"
      ],
      "metadata": {
        "id": "en_wvOtImNoW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, precision_score, recall_score, f1_score\n",
        "from sklearn.metrics import roc_curve, auc\n",
        "from sklearn.metrics import roc_auc_score"
      ],
      "metadata": {
        "id": "VXenCwKbdh9A"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_roc_curve(y_true, probs):\n",
        "    probs = probs[:, 1]\n",
        "    auc_ = roc_auc_score(y_true, probs)\n",
        "    print(' ROC AUC=%.3f' % (auc_))\n",
        "    fpr, tpr, treshold = roc_curve(y_true, probs)\n",
        "    roc_auc = auc(fpr, tpr)\n",
        "    plt.plot(fpr, tpr, color='purple',\n",
        "            label='ROC кривая (AUC = %0.2f)' % roc_auc)\n",
        "    plt.xlabel('False Positive Rate')\n",
        "    plt.ylabel('True Positive Rate')\n",
        "    plt.title('ROC-кривая')\n",
        "    plt.legend(loc=\"lower right\")\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "fi984svAdj_Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def showMetrics(y_true, y_predict, y_proba):\n",
        "    print(f\"Accuracy: {accuracy_score(y_true, y_predict)}\")\n",
        "    print(f\"Confusion matrix:\\n {confusion_matrix(y_true, y_predict)}\")\n",
        "    print(f\"Precision, Recall, F-score:\\n{classification_report(y_true, y_predict)}\")\n",
        "    #plot_roc_curve(y_true, y_proba)"
      ],
      "metadata": {
        "id": "qD9V5SNmdkGn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.naive_bayes import GaussianNB\n",
        "from sklearn.linear_model import LogisticRegression"
      ],
      "metadata": {
        "id": "885tM3bTdkJw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from sklearn.ensemble import ExtraTreesClassifier\n",
        "model = ExtraTreesClassifier()\n",
        "\n",
        "model.fit(X, y)\n",
        "\n",
        "print(model.feature_importances_)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wZY0zi0Xo-3G",
        "outputId": "c235bb26-a312-417a-97f9-4d544da357f2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.0335995  0.02586254 0.05070456 0.02034212 0.05263986 0.02395486\n",
            " 0.01179919 0.01308367 0.00573389 0.01482792 0.0223134  0.02522346\n",
            " 0.02409767 0.01548028 0.01280856 0.00603401 0.00792063 0.00596429\n",
            " 0.00416837 0.01233375 0.00161905 0.02984718 0.01637347 0.01873639\n",
            " 0.0226326  0.02753621 0.00664286 0.03452046 0.02799179 0.01011304\n",
            " 0.00428297 0.00738134 0.02739716 0.04072401 0.02421438 0.0237209\n",
            " 0.03203958 0.01089456 0.00784014 0.01094785 0.01156528 0.0054544\n",
            " 0.01054468 0.01592324 0.02028984 0.02442351 0.01004762 0.02149494\n",
            " 0.01002834 0.01458682 0.02240273 0.         0.02574136 0.00962746\n",
            " 0.02352129]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "чем больше значение, тем более важен признак. Например, sensor_49 не столь важен как sensor_50"
      ],
      "metadata": {
        "id": "1pVKMphppUkt"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Метод k-ближайших соседей"
      ],
      "metadata": {
        "id": "jY28-65baoG5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import GridSearchCV, RandomizedSearchCV"
      ],
      "metadata": {
        "id": "YMf21ZEUdyFL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "k_range = list(range(1, 30))\n",
        "param_grid = dict(n_neighbors=k_range)\n",
        "knn = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=2)\n",
        "knn.fit(X_train_std, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "IRPsMBSydzQj",
        "outputId": "2aebe382-7a17-4bd5-9bd9-1e66ededbfaa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "KNeighborsClassifier()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>KNeighborsClassifier()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">KNeighborsClassifier</label><div class=\"sk-toggleable__content\"><pre>KNeighborsClassifier()</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 49
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_knn_predict = knn.predict(X_test_std)\n",
        "knn_probs = knn.predict_proba(X_test_std)"
      ],
      "metadata": {
        "id": "I3XjL-2rd5G1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "showMetrics(y_test, knn_pred,  grid_knn_probs)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 172
        },
        "id": "jVIeqJghe6wL",
        "outputId": "72723c94-8d1d-4982-c322-3ad71aa7bb99"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-51-0e36018bcc22>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mshowMetrics\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mknn_pred\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0mgrid_knn_probs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'knn_pred' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Подберем параметр:"
      ],
      "metadata": {
        "id": "E7jYbLaue5Df"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "grid = GridSearchCV(knn, param_grid, cv=10, scoring='accuracy', return_train_score=False, verbose=1)\n",
        "grid_search=grid.fit(X_train_std, y_train)\n",
        "print(grid_search.best_params_)"
      ],
      "metadata": {
        "id": "vGuK1iZKd8mu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "k_range = list(range(1, 30))\n",
        "param_grid = dict(n_neighbors=k_range)\n",
        "knn = KNeighborsClassifier(n_neighbors=5, metric='minkowski', p=5)\n",
        "knn.fit(X_train_std, y_train)"
      ],
      "metadata": {
        "id": "o8azbuaGlYk7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "knn_pred = grid.predict(X_test_std)\n",
        "grid_knn_probs = grid.predict_proba(X_test_std)\n",
        "showMetrics(y_test, knn_pred,  grid_knn_probs)"
      ],
      "metadata": {
        "id": "hqdV39BTd8s-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##LogisticRegressio"
      ],
      "metadata": {
        "id": "ht-xr-c7mVE-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def LogisticRegressionFunc(X_train, y_train, X_test, y_test):\n",
        "    logistic = LogisticRegression(random_state=0)\n",
        "    distributions = dict(C= np.arange(1,10,0.1),penalty=['l2', 'l1'])\n",
        "    clf = RandomizedSearchCV(logistic, distributions, random_state=0)\n",
        "    search = clf.fit(X_train, y_train)\n",
        "    print(search.best_params_)\n",
        "    best_params = search.best_params_\n",
        "    logRes = LogisticRegression(penalty=best_params[\"penalty\"], C= best_params[\"C\"])\n",
        "    logRes.fit(X_train, y_train)\n",
        "    pred = logRes.predict(X_test)\n",
        "    probs = logRes.predict_proba(X_test)\n",
        "    showMetrics(y_test, pred, probs)"
      ],
      "metadata": {
        "id": "upd9jjkyd8v2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "LogisticRegressionFunc(X_train_std, y_train, X_test_std, y_test )"
      ],
      "metadata": {
        "id": "oFuPVB1od8yV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##SVM"
      ],
      "metadata": {
        "id": "2tt-NJ3Dl6B4"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import svm\n",
        "\n",
        "svm = svm.SVC()\n",
        "svm.fit(X_train, y_train)\n",
        "\n",
        "y_pred = svm.predict(X_test)\n",
        "print(classification_report(y_test, y_pred))"
      ],
      "metadata": {
        "id": "FTL4QHLxhjxx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Видим, что из трех представленных моделей лучше выбрать модель KNeighborsClassifier, так как значения метрик выше"
      ],
      "metadata": {
        "id": "HEOgEH43nQ7z"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.ensemble import BaggingClassifier\n"
      ],
      "metadata": {
        "id": "EZqmt1w26vQ-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "bag = BaggingClassifier().fit(X_train, y_train)\n",
        "print(classification_report(y_test, bag.predict(X_test)))"
      ],
      "metadata": {
        "id": "3fnd_fU-67Ob"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle"
      ],
      "metadata": {
        "id": "RMaFT4hBAAMA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "pickle.dump(knn, open('knn.sav', 'wb'))\n",
        "pickle.dump(bag, open('bag.sav', 'wb'))\n",
        "pickle.dump(svm, open('svm.sav', 'wb'))"
      ],
      "metadata": {
        "id": "7J07tAr7ABOP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Модуль С"
      ],
      "metadata": {
        "id": "UCeoO7r-7a7i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install -q numpy pandas scikit-learn streamlit"
      ],
      "metadata": {
        "id": "NDEtBQx47FUS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "data.to_csv('data.csv', index=False)"
      ],
      "metadata": {
        "id": "-XZiFzBvEj7F"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "Cs2ohX9gJnPI"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "%%writefile app.py\n",
        "import pickle\n",
        "import streamlit as st\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "\n",
        "def main():\n",
        "\n",
        "\n",
        "    knn = load_model(\"knn.sav\")\n",
        "    bag = load_model(\"bag.sav\")\n",
        "    svm = load_model(\"svm.sav\")\n",
        "    data = load_model(\"data.csv\")\n",
        "\n",
        "    page = st.sidebar.selectbox(\n",
        "        \"Выберите страницу\",\n",
        "        [\"Описание данных\", \"Визуализации\", \"Запрос к моделям\"]\n",
        "    )\n",
        "\n",
        "    # если выбрана первая страница\n",
        "    if page == \"Описание данных\":\n",
        "        st.title(\"Описание данных\")\n",
        "        st.header(\"Опасные космические объекты\")\n",
        "        st.write(\"Состояние водяной помпы мониторится с применением множества датчиков, которые фиксируют числовые значения. На основе анализа показаний датчиков в разное время зафиксированы три возможных состояния насоса - BROKEN, RECOVERING и NORMAL.\n",
        "Необходимо получить модель, которая на основе значений датчиков будет предсказывать текущее состояние насоса.\")\n",
        "        st.write(\"В рамках предобработки удалены пропуски в данных\")\n",
        "        st.write(data)\n",
        "\n",
        "    elif page == \"Визуализации\":\n",
        "\n",
        "        st.title(\"Визуализации\")\n",
        "        st.header(\"Визуализации зависимостей в данных\")\n",
        "\n",
        "        st.write(\"Гистограмма признака sensor_00\")\n",
        "        fig, ax = plt.subplots()\n",
        "        ax.hist(data[\"sensor_00\"])\n",
        "        st.pyplot(fig)\n",
        "\n",
        "        st.write(\"'Ящик с усами' для признака sensor_05\")\n",
        "        fig, ax = plt.subplots()\n",
        "        ax.boxplot(data[\"sensor_05\"])\n",
        "        st.pyplot(fig)\n",
        "\n",
        "        st.write(\"Матрица взаимной корреляции признаков\")\n",
        "        fig, ax = plt.subplots()\n",
        "        ax = sns.heatmap(data.corr(), linewidth=0.5)\n",
        "        st.pyplot(fig)\n",
        "\n",
        "\n",
        "    elif page == \"Запрос к моделям\":\n",
        "        st.title(\"Запрос к моделям\")\n",
        "        uploaded_data = st.file_uploader(\"Выберите csv файл\", accept_multiple_files=False)\n",
        "        if uploaded_data:\n",
        "          new_data = pd.read_csv(uploaded_data.name)\n",
        "          if st.button('Предсказать'):\n",
        "            knn_pred = knn.predict(new_data)\n",
        "            st.write(\"Предсказанное значение KNN\")\n",
        "            st.write(pd.DataFrame(knn_pred, columns=['Предсказания']))\n",
        "            bag_pred = bag.predict(new_data)\n",
        "            st.write(\"Предсказанное значение Bagging\")\n",
        "            st.write(pd.DataFrame(bag_pred, columns=['Предсказания']))\n",
        "            svm_pred = [np.argmax(pred) for pred in svm.predict(new_data, verbose=None)]\n",
        "            st.write(\"Предсказанное значение SVM\")\n",
        "            st.write(pd.DataFrame(svm_pred, columns=['Предсказания']))\n",
        "\n",
        "\n",
        "# для загрузки моделей sklearn - они у нас сохранены на диск как файлы\n",
        "@st.cache_data\n",
        "def load_model(path_to_file):\n",
        "    with open(path_to_file, 'rb') as model_file:\n",
        "        model = pickle.load(model_file)\n",
        "    return model\n",
        "\n",
        "# для загрузки датасета\n",
        "@st.cache_data\n",
        "def load_test_data(path_to_file):\n",
        "    df = pd.read_csv(path_to_file)\n",
        "    # ничего не дропаем - датасет полностью подготовлен\n",
        "    return df\n",
        "\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "khHRvNxZ7i7y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!npm install localtunnel"
      ],
      "metadata": {
        "id": "nFJBRIhR7rZU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "! curl https://ipinfo.io/ip"
      ],
      "metadata": {
        "id": "vA5_4f1-7yih"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!streamlit run /content/app.py &>/content/logs.txt &"
      ],
      "metadata": {
        "id": "DT_jjASO7ylT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "! fuser -k 8501/tcp"
      ],
      "metadata": {
        "id": "A8Bj6t_V7yoc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!npx localtunnel --port 8501"
      ],
      "metadata": {
        "id": "GelU_XuS7ysE"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}